{"version":3,"sources":["utils/api.ts","components/Menu/styles.ts","components/Menu/index.tsx","utils/toIsoString.ts","styles/home.ts","App.tsx","index.tsx"],"names":["url","handleGetRegions","a","axios","get","response","data","handleGetCountryData","iso","date","console","log","newCases","confirmed_diff","newDeaths","deaths_diff","useStyles","makeStyles","createStyles","Container","height","Menu","rest","classes","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","className","getXdaysfromToday","pastDays","Date","oldDate","getDate","oldDateNUmber","setDate","toISOString","substring","toIsoString","header","display","alignItems","justifyContent","padding","card","minWidth","flexDirection","App","useState","regions","setRegions","selectedCountry","setSelectedCountry","isDataLoading","setIsDataLoading","isInitialLoading","setIsInitialLoading","countryData","setCountryData","countryData90Days","setCountryData90Days","handleSetRegions","handleCountryData","handleCountryData90days","ref","i","push","anchorEl","setAnchorEl","useEffect","CssBaseline","style","maxWidth","Typography","variant","component","Button","endIcon","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","map","region","MenuItem","name","handleSelectCountry","ListItemText","primary","Grid","container","justify","spacing","item","Card","start","end","duration","separator","Skeleton","width","ComposedChart","XAxis","dataKey","YAxis","Tooltip","Legend","CartesianGrid","stroke","Bar","barSize","fill","Line","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e8d0def.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://covid-api.com/api';\n\ninterface CountryData {\n  date: string;\n  newCases: number; // confirmed_diff\n  newDeaths: number; // deaths_diff\n}\ninterface Regions {\n  data: {\n    data: Region[]\n  }\n}\ninterface Region {\n    iso: string;\n    name: string;\n}\nexport const handleGetRegions = async () => {\n  const response:Regions = await axios.get(`${url}/regions`)\n\n  return response.data\n}\n\nexport const handleGetCountryData = async (iso: string, date: string) => {\n  // const newDate = toIsoString(date);\n\n  const response = await axios.get(`${url}/reports/total?date=${date}&iso=${iso}`);\n\n  console.log(response.data.data)\n\n  const data: CountryData = {\n    date: response.data.data.date,\n    newCases: response.data.data.confirmed_diff,\n    newDeaths: response.data.data.deaths_diff,\n  }\n\n  console.log(data)\n  return data\n}\n\n\n","// import theme from 'styles/theme';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    Container: {\n      height: 300,\n    },\n  }),\n);\n\nexport default useStyles;\n","import React from 'react';\nimport {Menu as MenuComponent, MenuProps} from '@material-ui/core';\n// import { Container } from './styles';\nimport useStyles from './styles'\n\nexport const Menu: React.FC<MenuProps> = ({...rest}) => {\n  const classes = useStyles();\n\n  return (\n    <MenuComponent\n      elevation={0}\n      getContentAnchorEl={null}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'center',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'center',\n      }}\n      className={classes.Container}\n      {...rest}\n    />\n  )\n}\n\n","export const toIsoString = (date: Date) => {\n  return (new Date(date).toISOString().substring(0,10));\n}\n\nexport const getXdaysfromToday = (pastDays: number) => {\n  const date = new Date();\n  const oldDate = date.getDate() - pastDays;\n  const  oldDateNUmber = date.setDate(oldDate);\n\n  return toIsoString(new Date(oldDateNUmber));\n}\n","// import theme from 'styles/theme';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    \n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '50px 0',\n    },\n    card: {\n      padding: '30px 40px',\n      minWidth: 200,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column',\n    },\n  }),\n);\n\nexport default useStyles;\n","import { Card, Container, CssBaseline, Grid, ListItemText, MenuItem } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { handleGetCountryData, handleGetRegions } from './utils/api';\nimport {Button} from '@material-ui/core';\nimport { Menu } from './components/Menu';\nimport dataRange from 'date-range-array';\nimport { getXdaysfromToday } from './utils/toIsoString';\nimport useStyles from './styles/home';\nimport CountUp from 'react-countup';\n\n// icons\n// import CloseIcon from '@material-ui/icons/Close';\n// import ListIcon from '@material-ui/icons/List';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport { Typography } from '@material-ui/core';\nimport { Bar, CartesianGrid, ComposedChart, Legend, Line, Tooltip, XAxis, YAxis } from 'recharts';\nimport { Skeleton } from '@material-ui/lab';\n\n// import { ThemeProvider } from '@material-ui/core/styles';\ninterface Region {\n    iso: string;\n    name: string;\n}\ninterface CountryData {\n  date: string;\n  newCases: number; // confirmed_diff\n  newDeaths: number; // deaths_diff\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [regions, setRegions] = useState<Region[]>([]);\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\n  const [ isDataLoading, setIsDataLoading] = useState<boolean>(true);\n  const [ isInitialLoading, setIsInitialLoading] = useState<boolean>(true);\n  const [countryData, setCountryData] = useState<CountryData>({\n    date: \"\",\n    newCases: 0,// confirmed_diff\n    newDeaths: 0,\n  })\n\n  const [ countryData90Days, setCountryData90Days] = useState<CountryData[]>([]);\n\n  const handleSetRegions = async () => {\n    const response = await handleGetRegions();\n    const data = response.data;\n    setRegions(data);\n  }\n  const handleCountryData = async (iso: string) => {\n    const date = getXdaysfromToday(1);\n    const response = await handleGetCountryData(iso, date);\n    setCountryData(response);\n  }\n  const handleCountryData90days = async (iso: string) => {\n    let ref = []\n    for (let i = 1; i <= 90; i++){\n      setIsDataLoading(true)\n      const date = getXdaysfromToday(i);\n      const response = await handleGetCountryData(iso, date);\n      ref.push(response)\n    }\n    setIsDataLoading(false)\n    const data: CountryData[] = ref;\n    setCountryData90Days(data);\n    console.log(countryData90Days)\n  }\n\n \n\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleSelectCountry = (event: React.MouseEvent<HTMLElement>, region: Region) => {\n    setSelectedCountry(region.name);\n    setIsInitialLoading(false);\n    handleCountryData(region.iso);\n    handleCountryData90days(region.iso);\n    setAnchorEl(null);\n  };\n\n  useEffect(()=> {\n    handleSetRegions();\n  },[])\n\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    // <ThemeProvider theme={Theme}>\n    <Container>\n      \n      <CssBaseline />\n      {/* {regions.map(region=> {\n        return (\n          <div key={region.name}>{region.name}</div>\n        )\n      })} */}\n      <header className={classes.header}>\n        <span style={{maxWidth: '70vw'}}>\n        <Typography variant=\"h3\" component=\"h1\">\n          Covid19 Tracker\n        </Typography>\n        </span>\n        <Button\n          endIcon={anchorEl ? <ExpandLessIcon /> : <ExpandMoreIcon/>}\n          onClick={handleOpenMenu}\n        >\n          {selectedCountry || 'Select country'}\n        </Button>\n        <Menu\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        > \n\n          {regions.map((region)=> {\n            return (\n              <MenuItem \n                key={region.name} \n                onClick={ (event) => handleSelectCountry(event, region)}\n              >\n                <ListItemText primary={`${region.name}`} /> \n              </MenuItem>\n            )\n          })} \n        </Menu>\n      </header>\n\n      <Grid container justify=\"center\" spacing={5}>\n        <Grid item>\n          <Card className={classes.card}>\n            <Typography variant=\"subtitle1\">New cases:</Typography>\n            <Typography variant=\"h4\" component=\"span\">\n              <CountUp \n                start={0}\n                end={countryData.newCases}\n                duration={2}\n                separator=\" \"\n              />\n            </Typography>\n          </Card>\n        </Grid>\n        <Grid item>\n          <Card className={classes.card}>\n            <Typography variant=\"subtitle1\">New deaths:</Typography>\n            <Typography variant=\"h4\" component=\"span\">\n              <CountUp \n                start={0}\n                end={countryData.newDeaths}\n                duration={2}\n                separator=\" \"\n              />\n            </Typography>\n          </Card>\n        </Grid>\n      </Grid>\n      <div className={classes.header}>\n\n\n      {\n        !isDataLoading ? (\n          <ComposedChart width={730} height={250} data={countryData90Days}>\n          <XAxis dataKey=\"date\"/>\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <CartesianGrid stroke=\"#f5f5f5\" />\n          <Bar dataKey=\"newCases\" barSize={5} fill=\"#413ea0\" />\n          <Line type=\"monotone\" dataKey=\"newcases\" stroke=\"#ff7300\" />\n        </ComposedChart>\n        ) : (\n          (isInitialLoading) ? (\n            <span></span>\n          ) :\n          <div style={{display: 'flex', flexDirection: 'column'}}>\n            <span>Loading...</span>\n            <Skeleton width={500} height={400} />\n          </div>\n\n        )\n      }\n      </div>\n\n\n    </Container>\n\n    // </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}